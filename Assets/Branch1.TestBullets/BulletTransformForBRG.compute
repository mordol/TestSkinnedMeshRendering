// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel BulletTransformForBRG
#pragma kernel BulletTransformForBRG_InitBullets

// For instance data (BRG SSBO)
RWByteAddressBuffer _InstanceData;
int _InstanceCount;

RWStructuredBuffer<int> _VisibleInstances;

struct Bullet
{
    float3 direction;
    float accumulatedDistance;
};
RWStructuredBuffer<Bullet> _Bullets;

// Bullet visible flags
RWStructuredBuffer<int> _VisibleFlags;

RWStructuredBuffer<float3> _FireVectors;

StructuredBuffer<float4> _FrustumPlanes;

float _BulletSpeed;
float _TimeDelta;
float3 _PlayerPosition;
int _FireVectorCount;


#define SIZEOF_PACKEDMATRIX 48
#define OFFSET_POSITION 36

uint GetInstanceOffset(uint instanceIndex)
{
    return 96 + instanceIndex * SIZEOF_PACKEDMATRIX;
}

float3 GetInstancePosition(uint instanceOffset)
{
    return asfloat(_InstanceData.Load3(instanceOffset + OFFSET_POSITION));
}

void SetInstancePosition(uint instanceOffset, float3 position)
{
    _InstanceData.Store3(instanceOffset + OFFSET_POSITION, asuint(position));
}

void SetInstanceTransform(uint instanceOffset, float3 direction, float3 position, float3 scale)
{
    //https://stackoverflow.com/questions/18558910/direction-vector-to-rotation-matrix
    
    const float3 up = float3(0, 1, 0);
    
    float3 xaxis = cross(up, direction);
    xaxis = normalize(xaxis);

    float3 yaxis = cross(direction, xaxis);
    yaxis = normalize(yaxis);
    
    const uint sizeFloat3 = 12;
    _InstanceData.Store3(instanceOffset, asuint(xaxis * scale.x));
    _InstanceData.Store3(instanceOffset + sizeFloat3, asuint(yaxis * scale.y));
    _InstanceData.Store3(instanceOffset + sizeFloat3 + sizeFloat3 , asuint(direction * scale.z));
    _InstanceData.Store3(instanceOffset + sizeFloat3 + sizeFloat3 + sizeFloat3 , asuint(position));
}

bool IsPointInFrustum(float3 pointPos)
{
    for (int i = 0; i < 6; i++)
    {
        float4 plane = _FrustumPlanes[i];
        if (dot(float4(pointPos, 1.0), plane) < 0)
        {
            return false;
        }
    }
    return true;
}

//[numthreads(8,8,1)]
[numthreads(64,1,1)]
void BulletTransformForBRG (uint3 id : SV_DispatchThreadID)
{
    if (_VisibleFlags[id.x] <= 0)
        return;

    uint instanceOffset = GetInstanceOffset(id.x);

    float3 position = GetInstancePosition(instanceOffset);
    float3 direction = _Bullets[id.x].direction;
    float accumulatedDistance = _Bullets[id.x].accumulatedDistance;

    float moveDistance = _TimeDelta * _BulletSpeed;
    if (accumulatedDistance < 1.0)
    {
        moveDistance = 1.0; // trail length
    }

    float3 newPosition = position + direction * moveDistance;
    SetInstancePosition(instanceOffset, newPosition);

    accumulatedDistance += moveDistance;
    if (accumulatedDistance > 20.0)
    {
        _VisibleFlags[id.x] = 0;
        _VisibleInstances[id.x] = -1;
        accumulatedDistance = 0.0;
    }
    else if (!IsPointInFrustum(newPosition))
    {
        _VisibleInstances[id.x] = -1;
    }
    else
    {
        _VisibleInstances[id.x] = id.x;
    }

    _Bullets[id.x].accumulatedDistance = accumulatedDistance;

    // TODO: worldToObject also needs to be recalculated
}

[numthreads(1,1,1)]
void BulletTransformForBRG_InitBullets (uint3 id : SV_DispatchThreadID)
{
    for (int i = 0, index = 0; i < _InstanceCount; i++)
    {
        if (index >= _FireVectorCount)
            break;

        if (_VisibleFlags[i] <= 0)
        {
            float3 direction = _FireVectors[index];
            _Bullets[i].direction = direction;
            _Bullets[i].accumulatedDistance = 0.0;
            _VisibleFlags[i] = 1;
            SetInstanceTransform(GetInstanceOffset(i), direction, _PlayerPosition, float3(0.1, 1.0, 1.0));
            ++index;
        }
    }
}